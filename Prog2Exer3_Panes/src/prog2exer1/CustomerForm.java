/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package prog2exer1;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.FileOutputStream;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.*;
import static prog2exer1.ProductsWindow.tc;
/**
 *
 * @author Iya
 */
public class CustomerForm extends javax.swing.JFrame {
String [][][] orders3d = new String[10][10][7];
int id = 0;
static String [][] cus = new String[10][7];
static ArrayList<Integer> deletedID = new ArrayList<Integer>();
int rownum = 0;
int typecount = 0;
static int pquan;
static int porder;
static int prodquan;
static int prodorder;
static boolean add;
static tocsv tc = new tocsv();
boolean selected = false;
ProductsWindow prod = new ProductsWindow();
    /**
     * Creates new form CustomerForm
     */
    public CustomerForm()  {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cemail = new javax.swing.JTextField();
        updateCus = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        emailcheck = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        bdaycheck = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cadd = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cno = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cbday = new javax.swing.JTextField();
        cgender = new javax.swing.JComboBox();
        delCus = new javax.swing.JButton();
        saveCus = new javax.swing.JButton();
        cid = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        maintbl = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ordertbl = new javax.swing.JTable();
        addorder = new javax.swing.JButton();
        print = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jLabel6.setText("jLabel6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("ID No.");

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Customer Registration System");

        jLabel3.setText("Customer Name:");

        cname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cnameActionPerformed(evt);
            }
        });

        jLabel4.setText("Customer Email:");

        cemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cemailActionPerformed(evt);
            }
        });
        cemail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cemailKeyReleased(evt);
            }
        });

        updateCus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        updateCus.setForeground(new java.awt.Color(255, 153, 0));
        updateCus.setText("Update");
        updateCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCusActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 153, 153));
        jLabel5.setText("Last, First");

        emailcheck.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        emailcheck.setForeground(new java.awt.Color(153, 153, 153));
        emailcheck.setText(" e.g. youremail@domainname.com");

        jLabel7.setText("Customer Bday:");

        bdaycheck.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bdaycheck.setForeground(new java.awt.Color(153, 153, 153));
        bdaycheck.setText("mm/dd/yyyy");

        jLabel9.setText("Customer Address:");

        cadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caddActionPerformed(evt);
            }
        });

        jLabel10.setText("Customer Contact No.");

        cno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cnoActionPerformed(evt);
            }
        });

        jLabel11.setText("Customer Gender:");

        cbday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbdayActionPerformed(evt);
            }
        });
        cbday.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cbdayKeyReleased(evt);
            }
        });

        cgender.setEditable(true);
        cgender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-----------", "Female", "Male" }));
        cgender.setToolTipText("");
        cgender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cgenderActionPerformed(evt);
            }
        });

        delCus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        delCus.setForeground(new java.awt.Color(204, 0, 0));
        delCus.setText("Delete");
        delCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delCusActionPerformed(evt);
            }
        });

        saveCus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        saveCus.setForeground(new java.awt.Color(0, 153, 153));
        saveCus.setText("Save");
        saveCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCusActionPerformed(evt);
            }
        });

        cid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cidActionPerformed(evt);
            }
        });

        maintbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Address", "Contact No.", "Email", "Birthday", "Gender"
            }
        ));
        maintbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                maintblMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(maintbl);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ordertbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Invoice No.", "Product ID", "Product Type", "Product Desc", "Quantity", "Unit Price", "Date Ordered"
            }
        ));
        jScrollPane1.setViewportView(ordertbl);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        addorder.setText("Add Order");
        addorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addorderActionPerformed(evt);
            }
        });

        print.setText("Print Invoice");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        jMenu4.setText("File");
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        jMenuItem2.setText("Products");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel10))))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cemail)
                            .addComponent(cno)
                            .addComponent(cid)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(emailcheck)
                                    .addComponent(jLabel5))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(cname)
                            .addComponent(cadd)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel11))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbday, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(bdaycheck))
                                    .addComponent(cgender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addorder)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(saveCus)
                                        .addGap(46, 46, 46)
                                        .addComponent(updateCus)
                                        .addGap(46, 46, 46)
                                        .addComponent(delCus)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(print)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel3)))
                        .addGap(2, 2, 2)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel9))
                            .addComponent(cadd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(cno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cemail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addComponent(emailcheck)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bdaycheck))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel7)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(cgender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveCus, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(delCus, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(updateCus, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(26, 26, 26)
                        .addComponent(addorder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(print)
                        .addGap(22, 22, 22))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cnameActionPerformed

    private void cemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cemailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cemailActionPerformed
    //UPDATE BUTTON
    private void updateCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCusActionPerformed
        DefaultTableModel tbl = (DefaultTableModel) maintbl.getModel(); 
        if(maintbl.getSelectedRowCount() == 1){
            if(cname.getText().length() == 0 || cemail.getText().length() == 0 || cadd.getText().length() == 0 || cgender.getSelectedItem() == "-----------" || cbday.getText().length() == 0
                || cno.getText().length() == 0){
                customerAdded("Incomplete Credentials!", "Error");
            }else if(cname.getText().length() != 0 && cemail.getText().length() != 0 && cadd.getText().length() != 0 && cgender.getSelectedItem() != "-----------" && cbday.getText().length() != 0
                    || cno.getText().length() != 0){
                if(checkName(cname.getText()) == true && emailcheck.getText().equals("Good Email") && checkNumber(cno.getText()) == true && cno.getText().length() == 11 
                    && bdaycheck.getText().equals("Valid birthday") && cgender.getSelectedItem() != "-----------"){
             String name = cname.getText();
             String address = cadd.getText();
             String num = cno.getText();
             String email = cemail.getText();
             String bday = cbday.getText();
             String gender = cgender.getSelectedItem().toString();
             int idselect = Integer.parseInt(tbl.getValueAt(maintbl.getSelectedRow(),0).toString());
             
             //replace elements in array
             String [] creds = {String.valueOf(idselect),name,address,num,email,bday,gender};
             try{
                for(int y=0;y<cus[0].length;y++){
                    cus[rownum][y] = creds[y];
                }
             }catch(Exception e){
             }
            tbl.setRowCount(0);
            tc.getcus();
            tc.customerscsv();
            tc.showcuscsv();
            try{                                                //show with csv
                for(int i=0;i<tc.cusnew.length;i++){
                    for(int j=0;j<tc.cusnew[0].length;j++){
                        if(tc.cusnew[i][0].equals("-")){
                            continue;
                        }else{
                            cus[i][j] = tc.cusnew[i][j];
                        }
                    }
                    if(cus[i][0] != null){
                        tbl.addRow(cus[i]);
                    }
                }
            }catch (Exception e){
            }
             customerAdded("Update Successful!", "Success");
                }
            }
        }else{
           if(maintbl.getRowCount() == 0){
               customerAdded("Empty Table!", "Error");
           }else{
               customerAdded("Please select a row to update!", "Error");
           }
        }
    }//GEN-LAST:event_updateCusActionPerformed
    //check if contact no. has no letters
    public static boolean checkNumber(String coNum){
        return coNum.matches("^\\d+\\d+$");  //check int beside int?
    }
    
    private void cemailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cemailKeyReleased
        boolean  at = false;
        boolean com = false;
        String email = cemail.getText();
        if(email.matches("^[a-z0-9]+[._]*[@][a-z]+\\.(com)$") == true && cemail.getText().length() > 15){   
            at = true;
            com = true;
        }else{
            at = false;
            com = false;
        }
        if(at == true && com == true){
            emailcheck.setForeground(Color.green);
            emailcheck.setText("Good Email");
        }else{
            emailcheck.setForeground(Color.red);
            emailcheck.setText("Bad Email");
        }
    }//GEN-LAST:event_cemailKeyReleased

    private void caddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_caddActionPerformed

    private void cnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cnoActionPerformed

    private void cbdayKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbdayKeyReleased
        if(checkFormat(cbday.getText()) == true){
            int month = Integer.parseInt(cbday.getText().substring(0,2).trim());
            int day = Integer.parseInt(cbday.getText().substring(3,5).trim());
            int year = Integer.parseInt(cbday.getText().substring(6,10).trim());
            LocalDate today = LocalDate.now();
            LocalDate bdayin = LocalDate.of(year,month,day);
            int diff = Period.between(bdayin, today).getYears();
                if(diff >= 18){
                    bdaycheck.setForeground(Color.green);
                    bdaycheck.setText("Valid birthday");
                }else if(diff < 18){
                    bdaycheck.setForeground(Color.red);
                    bdaycheck.setText("Invalid birthday/Minor");
                }
        }
        else if(checkFormat(cbday.getText()) == false){
            bdaycheck.setForeground(Color.red);
            bdaycheck.setText("Invalid birthday/Format");
        }
    }//GEN-LAST:event_cbdayKeyReleased

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed

    }//GEN-LAST:event_jMenu4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        ProductsWindow pwin = new ProductsWindow();
        pwin.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    //save button
    private void saveCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCusActionPerformed
        String msg = null;
        String titlbar = null;
        //
        if(cname.getText().length() == 0 || cemail.getText().length() == 0 || cadd.getText().length() == 0 || cgender.getSelectedItem() == "-----------" || cbday.getText().length() == 0
                || cno.getText().length() == 0){
            titlbar = "Error";
            msg = "Incomplete credentials!";
        }
        else if(cname.getText().length() != 0 && cemail.getText().length() != 0 && cadd.getText().length() != 0 && cgender.getSelectedItem() != "-----------" && cbday.getText().length() != 0
                || cno.getText().length() != 0){
            if(checkName(cname.getText()) == true && emailcheck.getText().equals("Good Email") && checkNumber(cno.getText()) == true && cno.getText().length() == 11 
                    && bdaycheck.getText().equals("Valid birthday") && cgender.getSelectedItem() != "-----------"){
        int index = 0;
        //////////////////////////////////////////////////////////////////////table//////////////////////////////////////////////////////////////////////////////////////////
        DefaultTableModel tbl = (DefaultTableModel) maintbl.getModel(); 
        tc.delcsv();
        deletedID.clear();
        tc.showdel();
        try{
            deletedID.addAll(tc.delIDnew);
        }catch (Exception e){
        }
        if(id == 0)
            tbl.setRowCount(0);
        if(cus[0][0] == null || cus[0][0].equals("")){
                index = 0;
                id = 1;
            }else{
                while(cus[index][0] != null){       //find available index
                    if(index == cus.length){
                        titlbar = "Error!";
                        msg = "Limit reached!";
                    }else{
                        index++;
                    }
                }
                id = Integer.parseInt(cus[index-1][0]) + 1;
            }
        Collections.sort(deletedID);    //sort elements in arraylist ascending 
        if(deletedID.isEmpty()){        //no deleted id in arraylist
            cid.setText(String.valueOf(id));
            String [] creds = {String.valueOf(id),cname.getText(),cadd.getText(),cno.getText(),cemail.getText(),cbday.getText(),cgender.getSelectedItem().toString()};
            try{
                for(int y=0;y<cus[0].length;y++){
                    cus[index][y] = creds[y];
                }
            }catch (Exception e){   
            }
        }else{                          //has deleted id in arraylist
            Iterator it = deletedID.iterator();
            int id2;
                if(it.hasNext()){
                    id2 = Integer.parseInt(it.next().toString());       //first element in deleted id arraylist
                    deletedID.remove(deletedID.indexOf(id2));
                    String [] creds = {String.valueOf(id2),cname.getText(),cadd.getText(),cno.getText(),cemail.getText(),cbday.getText(),cgender.getSelectedItem().toString()};
                    try{
                        for(int y=0;y<cus[0].length;y++){
                            cus[index][y] = creds[y];
                        }
                    }catch(Exception e){
                    }
                }
        }
        tc.getdel();
        tc.delcsv();
        tc.showdel();
        tc.getcus();
        tc.customerscsv();
        tc.showcuscsv();
        tbl.setRowCount(0);
        try{                                                //show with csv
            for(int i=0;i<tc.cusnew.length;i++){
                for(int j=0;j<tc.cusnew[0].length;j++){
                    if(tc.cusnew[i][0].equals("-")){
                        continue;
                    }else{
                        cus[i][j] = tc.cusnew[i][j];
                    }
                }
                if(cus[i][0] != null){
                    tbl.addRow(cus[i]);
                }
            }
        }catch (Exception e){
        }
        titlbar = "Customer Added";
        msg = "Success";
        //////////////////////////////////////////////////////////////////////////table//////////////////////////////////////////////////////////////////////////////////////
            }else if(checkName(cname.getText()) == false || emailcheck.getText().equals("Bad Email") || checkNumber(cno.getText()) == false || cno.getText().length() != 11 
                    || bdaycheck.getText().equals("Invalid birthday/Format") || bdaycheck.getText().equals("Invalid birthday/Minor") || cgender.getSelectedItem() != "-----------"){
                titlbar = "Error";
                msg = "Invalid! Please check the following: \n \n Name must not be a number and format is followed \n Contact number must be 11 digits/integers "
                        + "\n Email may be invalid \n Follow bday format/No minors allowed \n No gender selected";
            }
        }
         customerAdded(msg,titlbar);
    }//GEN-LAST:event_saveCusActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        cid.setEditable(false);
        DefaultTableModel tbl= (DefaultTableModel) maintbl.getModel(); 
        DefaultTableModel tbl2 = (DefaultTableModel) ordertbl.getModel(); 
         if(id == 0)
            tbl.setRowCount(0);
            tbl2.setRowCount(0);
        tc.showcuscsv();                                //customers csv
            for(int i=0;i<tc.cusnew.length;i++){
                for(int j=0;j<tc.cusnew[0].length;j++){
                    if(tc.cusnew[i][1] != null){
                        cus[i][j] = tc.cusnew[i][j];
                    }
                }
            }
            for(int i=0;i<cus.length;i++){
                if(cus[i][0] != null){
                    tbl.addRow(cus[i]);
                }
            }
        tc.showorders();                                //orders csv
        try{
            for(int i=0;i<tc.orderstblnew.length;i++){
                for(int j=0;j<tc.orderstblnew[0].length;j++){
                    for(int k=0;k<tc.orderstblnew[0][0].length;k++){
                        if(tc.orderstblnew[i][j][0] != null){
                            orders3d [i][j][k] = tc.orderstblnew[i][j][k];
                        }
                    }
                }
            }
        }catch (Exception e){
        }
        tc.showcosts();
        tc.showdel();
        tc.showorders(); 
        try{
            deletedID.clear();
            deletedID.addAll(tc.delIDnew);
        }catch (Exception e){
        }
    }//GEN-LAST:event_formWindowOpened
 
    private void cbdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbdayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbdayActionPerformed

    private void cgenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cgenderActionPerformed

    }//GEN-LAST:event_cgenderActionPerformed

    private void cidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cidActionPerformed

    private void maintblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maintblMouseClicked
        DefaultTableModel tbl2 = (DefaultTableModel) ordertbl.getModel();
        int [] selectRow = maintbl.getSelectedRows();
        rownum = maintbl.getSelectedRow();
        cid.setText(maintbl.getValueAt(selectRow[0], 0).toString());
        cname.setText(maintbl.getValueAt(selectRow[0], 1).toString());
        cadd.setText(maintbl.getValueAt(selectRow[0], 2).toString());
        cno.setText(maintbl.getValueAt(selectRow[0], 3).toString());
        cemail.setText(maintbl.getValueAt(selectRow[0], 4).toString());
        cbday.setText(maintbl.getValueAt(selectRow[0], 5).toString());
        cgender.getEditor().setItem(maintbl.getValueAt(selectRow[0], 6).toString());
        tbl2.setRowCount(0);
        showorder();
        selected = true;
    }//GEN-LAST:event_maintblMouseClicked

    private void delCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delCusActionPerformed
        DefaultTableModel tbl = (DefaultTableModel) maintbl.getModel(); 
            if(maintbl.getSelectedRow()>=0){
                int [] selectRow = maintbl.getSelectedRows();
                int dID = (Integer.parseInt(maintbl.getValueAt(selectRow[0], 0).toString()));
                deletedID.add(dID);
                tbl.removeRow(maintbl.getSelectedRow());
                int indexDel = 0;
                for(int i=0;i<cus.length;i++){
                    for(int j=0;j<cus[0].length;j++){
                        if(cus[i][j] != null){
                            if(cus[i][j].equals(Integer.toString(dID))){
                                indexDel = i;
                                break;
                            }
                        }
                    }
                }
                for(int i=0;i<cus[i].length;i++){
                    cus[indexDel][i] = null;
                }
                tc.getcus();
                tc.customerscsv();
                tc.showcuscsv();
                try{
                    for(int i=0;i<tc.cusnew.length;i++){
                        for(int j=0;j<tc.cusnew[0].length;j++){
                            if(tc.cusnew[i][j].equals("-")){
                                continue;
                            }else{
                                cus[i][j] = tc.cusnew[i][j];
                            }
                        }
                    }
                }catch (Exception e){
                }
                System.out.println("Cus After Del: ");
                System.out.println(Arrays.deepToString(cus));
                System.out.println("CusNew After Del: ");
                System.out.println(Arrays.deepToString(tc.cusnew));
                customerAdded("Customer deletion success!", "Success");
            }else{
                customerAdded("Please select row to be deleted!", "Error");
            }
    }//GEN-LAST:event_delCusActionPerformed

    private void addorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addorderActionPerformed
        DefaultTableModel tbl2 = (DefaultTableModel) ordertbl.getModel();
        String pid = prod.pidorder;
        String ptype = prod.ptypeorder;
        String pdesc = prod.pdescorder;
        int unitprice = 0;
        int pcost = prod.costorder;
        int laborcost = prod.labor;
        int oh = prod.overhead;
        int dp = prod.desprof;
        int quantity = 0;
        int countquan = 0;
        int invnum = rownum + 1;
        boolean contains = false;
        add = false;
        LocalDate dorder = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/uuuu");
        String dordered = dorder.format(formatter);
    if(Integer.toString(laborcost).length() != 0 && Integer.toString(oh).length() != 0 && Integer.toString(dp).length() != 0){
            for(int b=0;b<orders3d[0].length;b++){
                if(orders3d[rownum][b][0] != null){
                    if(orders3d[rownum][b][1].equals(pid)){
                        if(orders3d[rownum][b][2].equals(ptype)){
                            if(orders3d[rownum][b][3].equals(pdesc)){
                                contains = true;
                                countquan = b;
                                break;
                            }
                        }
                    }
                }
            }
                if(contains == true){
                    quantity = Integer.parseInt(orders3d[rownum][countquan][4].toString());
                    quantity++;
                    prod.afterAdd();
                    unitprice = (pcost/(prod.ordersnum+prod.quanorder)) + laborcost + oh + dp;
                    String [] order = {Integer.toString(invnum), pid, ptype, pdesc, Integer.toString(quantity), Integer.toString(unitprice), dordered};
                    for(int j=0;j<orders3d[0][0].length;j++){
                        orders3d[rownum][countquan][j] = order[j];
                        
                    }
                    add = true; 
                }
                else if(contains == false){
                        int maxrow = tbl2.getRowCount();
                        quantity = 1;   
                        prod.afterAdd();
                        unitprice = (pcost/(prod.ordersnum+prod.quanorder)) + laborcost + oh + dp;
                        String [] order = {Integer.toString(invnum), pid, ptype, pdesc, Integer.toString(quantity), Integer.toString(unitprice), dordered};
                        for(int j=0;j<orders3d[0][0].length;j++){
                            orders3d[rownum][maxrow][j] = order[j];
                        }
                        add = true;
                }
        for(int i=0;i<tc.orderstbl.length;i++){                         //orders3d to csv orderstbl array
            for(int j=0;j<tc.orderstbl[0].length;j++){
                for(int k=0;k<tc.orderstbl[0][0].length;k++){
                    tc.orderstbl [i][j][k] = orders3d[i][j][k];
                }
            }
        }
        tc.getorders();
        tc.orderscsv();
//        tc.showorders(); 
        tc.showcosts();
        try{
            for(int i=0;i<tc.orderstblnew.length;i++){
                for(int j=0;j<tc.orderstblnew[0].length;j++){
                    for(int k=0;k<tc.orderstblnew[0][0].length;k++){
                        if(tc.orderstblnew[i][j][k].equals("|")){
                            continue;
                        }else{
                            orders3d[i][j][k] = tc.orderstblnew[i][j][k];
                        }
                        if(tc.orderstblnew[i][j][k].equals("-")){
                            continue;
                        }else{
                            orders3d[i][j][k] = tc.orderstblnew[i][j][k];
                        }
                    }
                } 
            }
        }catch (Exception e){
        } 
        showorder();
    }   
    else{
        customerAdded("Error!", "Please input the labor cost, overhead cost, and desired profit.");
    }
    }//GEN-LAST:event_addorderActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated
    //print button
    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
    if(selected == true && orders3d[rownum][0][0] != null){
        Document doc = new Document();
        PdfWriter docWriter = null;
        LocalDate today = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/uuuu");
        String formattedtoday = today.format(formatter);
        String path = "C:\\Users\\panes\\invoice.pdf";
        double subtotal = 0;
        try{
            Font title = new Font(FontFamily.HELVETICA, 15, Font.BOLD, new BaseColor(0, 0, 0));
            Font small = new Font(FontFamily.HELVETICA, 10);
            Font smallbold = new Font(FontFamily.HELVETICA, 10, Font.BOLD);
            docWriter = PdfWriter.getInstance(doc, new FileOutputStream(path));
            doc.open();
            float[] colWidth1 = {30f, 20f, 20f, 30f};
            float[] colWidth2 = {30f, 20f, 20f, 30f};
            PdfPTable tbl1 = new PdfPTable(colWidth1);
            PdfPTable tbl2 = new PdfPTable(colWidth2);
            tbl1.setWidthPercentage(90f);                            
            Paragraph par = new Paragraph();
            // table 1  
            createCell(tbl1, "Iya Enterprise", Element.ALIGN_LEFT, 2, title, 0, 255, 255, 255);                 
            createCell(tbl1, "CUSTOMER RECEIPT", Element.ALIGN_RIGHT, 2, title, 0, 255, 255, 255);
            createCell(tbl1, "Abc Street, Def Building", Element.ALIGN_LEFT, 2, small, 0, 255, 255, 255);
            createCell(tbl1, "Invoice No. " + orders3d[rownum][0][0], Element.ALIGN_RIGHT, 2, small, 0, 255, 255, 255);       //invoice number
            createCell(tbl1, "Davao City, Davao Del Sur", Element.ALIGN_LEFT, 2, small, 0, 255, 255, 255);
            createCell(tbl1, "Customer No. " + cus[rownum][0], Element.ALIGN_RIGHT, 2, small, 0, 255, 255, 255);                   //cus number
            createCell(tbl1, "Philippines", Element.ALIGN_LEFT, 2, small, 0, 255, 255, 255);
            createCell(tbl1, formattedtoday, Element.ALIGN_RIGHT, 2, small, 0, 255, 255, 255);                  //date today
            blankCell(tbl1, Element.ALIGN_CENTER, 4, 0, 255, 255, 255);
            createCell(tbl1, "Bill To", Element.ALIGN_LEFT, 4, smallbold, 0, 255, 255, 255);                 // table 1 start 
            createCell(tbl1, cus[rownum][1], Element.ALIGN_LEFT, 4, small, 0, 255, 255, 255);                   // name
            createCell(tbl1, cus[rownum][2], Element.ALIGN_LEFT, 4, small, 0, 255, 255, 255);                   //address
            createCell(tbl1, cus[rownum][3], Element.ALIGN_LEFT, 4, small, 0, 255, 255, 255);                   //contact
            blankCell(tbl1, Element.ALIGN_CENTER, 4, 0, 255, 255, 255);
            // table 2 
            createCell(tbl2, "PRODUCT", Element.ALIGN_CENTER, 2, smallbold, 0, 220, 220, 220);   
            createCell(tbl2, "QUANTITY", Element.ALIGN_CENTER, 1, smallbold, 0, 220, 220, 220);
            createCell(tbl2, "UNIT PRICE", Element.ALIGN_CENTER, 1, smallbold, 0, 220, 220, 220);
            for(int i=0;i<orders3d[0].length;i++){
                if(orders3d[rownum][i][0] != null){
                    createCell(tbl2, orders3d[rownum][i][2] + " " + orders3d[rownum][i][3], Element.ALIGN_LEFT, 2, small, 0, 245, 245, 245);
                    createCell(tbl2, orders3d[rownum][i][4], Element.ALIGN_CENTER, 1, small, 0, 245, 245, 245);
                    createCell(tbl2, orders3d[rownum][i][5].toString(), Element.ALIGN_CENTER, 1, small, 0, 245, 245, 245);
                    subtotal += (Integer.parseInt(orders3d[rownum][i][4])*Integer.parseInt(orders3d[rownum][i][5].toString()));
                }
            }
            blankCell(tbl2, Element.ALIGN_CENTER, 4, 0, 255, 255, 255);
            blankCell(tbl2, Element.ALIGN_CENTER, 2, 0, 255, 255, 255);
            createCell(tbl2, "SUBTOTAL", Element.ALIGN_CENTER, 1, smallbold, 0, 255, 255, 255);
            createCell(tbl2, Double.toString(subtotal), Element.ALIGN_CENTER, 1, small, 0, 255, 255, 255);
            blankCell(tbl2, Element.ALIGN_CENTER, 2, 0, 255, 255, 255);
            createCell(tbl2, "TAX 12%", Element.ALIGN_CENTER, 1, smallbold, 0, 255, 255, 255);
            createCell(tbl2, Double.toString(subtotal*0.12), Element.ALIGN_CENTER, 1, small, 0, 255, 255, 255);
            blankCell(tbl2, Element.ALIGN_CENTER, 2, 0, 255, 255, 255);
            createCell(tbl2, "TOTAL", Element.ALIGN_CENTER, 1, smallbold, 1, 255, 255, 255);
            createCell(tbl2, Double.toString(subtotal*0.12 + subtotal), Element.ALIGN_CENTER, 1, smallbold, 1, 255, 255, 255);
            par.add(tbl1);
            par.add(tbl2);
            doc.add(par);                                              
            tbl1.setWidthPercentage(90f);
        }catch (Exception e){
            System.out.println("Unable to print invoice!");
        }
        if(doc != null){
            doc.close();
        }
        try{
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + path);
        }catch (Exception e){
            System.out.println("No pdf yet!");
        }
    }else{
        customerAdded("No customer selected!", "Error");
    }
    }//GEN-LAST:event_printActionPerformed
    //pdf cell
    public static void createCell(PdfPTable table, String text, int align, int colspan, com.itextpdf.text.Font font, int border, int r, int g, int b){
        PdfPCell cell = new PdfPCell(new Phrase(text.trim(), font));
        cell.setHorizontalAlignment(align);
        cell.setColspan(colspan);
        if (border == 0){
            cell.setBorder(Rectangle.NO_BORDER);
        }
        else{
            cell.setBorder(Rectangle.BOX);
        }
        cell.setBackgroundColor(new BaseColor(r, g, b));
        table.addCell(cell);
    }
    //black cell
    public static void blankCell(PdfPTable table, int align, int colspan, int border, int r, int g, int b){
        PdfPCell cell = new PdfPCell(new Phrase("\n"));
        cell.setHorizontalAlignment(align);
        cell.setColspan(colspan);
        if (border == 0){
            cell.setBorder(Rectangle.NO_BORDER);
        }
        else{
            cell.setBorder(Rectangle.BOX);
        }
        cell.setBackgroundColor(new BaseColor(r, g, b));
        table.addCell(cell);
    }
    //show order
    public void showorder(){
        DefaultTableModel tbl2 = (DefaultTableModel) ordertbl.getModel();
        tbl2.setRowCount(0);
        if(tbl2.getRowCount() == 0){
            for(int i=0;i<orders3d[0].length;i++){
                if(orders3d[rownum][i][0] != null){
                    tbl2.addRow(orders3d[rownum][i]);
                }
            }
        }
    }
    //check if name has no numbers
    public static boolean checkName(String name){
        return name.matches("^[A-Z][a-z]+[,]\\s[A-Z][a-z]+$"); //check if all letters and follows format
    }
    //check bday if it follows format
    public static boolean checkFormat(String bday){
        DateTimeFormatter df = DateTimeFormatter.ofPattern("MM/dd/uuuu");
        try{
            df.parse(bday);
            return true;
        }
        catch(Exception e){
            return false;
        }
    }
    public void customerAdded(String msg, String titlebar){
        JOptionPane.showMessageDialog(null,msg,titlebar,JOptionPane.INFORMATION_MESSAGE);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addorder;
    private javax.swing.JLabel bdaycheck;
    public javax.swing.JTextField cadd;
    public javax.swing.JTextField cbday;
    public javax.swing.JTextField cemail;
    public javax.swing.JComboBox cgender;
    public javax.swing.JTextField cid;
    public javax.swing.JTextField cname;
    public javax.swing.JTextField cno;
    private javax.swing.JButton delCus;
    private javax.swing.JLabel emailcheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable maintbl;
    private javax.swing.JTable ordertbl;
    private javax.swing.JButton print;
    private javax.swing.JButton saveCus;
    private javax.swing.JButton updateCus;
    // End of variables declaration//GEN-END:variables
}
